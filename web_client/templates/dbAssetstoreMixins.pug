//- Inputs:
  multiple : boolean, default True
  tableList : a list of knowm database tables, each contains a record with an
    individual database which has the property 'database' with the name of the
    database and 'tables' which has a list of tables, each of which has the
    property 'name'.
  maxSelectSize : the maximum number of rows to show in the select box, default
    20.
mixin g-dbas-table-select
  - multiple = multiple !== undefined ? multiple : true;
  - tableList = tableList || [];
  - var numEntries = tableList.length > 1 ? 1 : 0
  for database in tableList
    - numEntries += database['tables'].length + (database['tables'].length > 1&& multiple ? 2 : 1)
  - var selectSize = Math.min(numEntries, maxSelectSize ? maxSelectSize : 20)
  select#g-dbas-table-name.input-sm.form-control(multiple=multiple, size=selectSize > 1 && multiple ? selectSize : undefined)
    if tableList.length > 1 && multiple
      option(value='', selected=true) All tables in all databases
    for database in tableList
      optgroup(label= database['database'])
        if database['tables'].length > 1 && multiple
          option(value='database:'+database['database']) All tables
        for table in database['tables']
          option(value='database:'+database['database']+':table:'+table['name'])= table['name']

//- Inputs:
  importTitle : string, default is for importing multiple tables
  see also the g-dbas-table-select plugin
mixin g-dbas-import-tables
  .form-group(title=importTitle || 'Each selected table will be added as a new item if it doesn\'t already exist in the destination')
    label(for='g-dbas-table-name') Table or Collection name
    #g-dbas-table-select-container
      +g-dbas-table-select
  .form-group(title="Optional.  This is either a field (column) name or a JSON list of multiple fields and directions for sorting (e.g., [['field1', 1], ['field2', -1]])")
    label(for='g-dbas-sort-param') Default sort order
    input#g-dbas-sort-param.form-control.input-sm(type='text')
  .form-group(title='Optional.  A comma-separated or JSON list of fields (column names) to return')
    label(for='g-dbas-fields-param') Default fields
    input#g-dbas-fields-param.form-control.input-sm(type='text')
  .form-group(title='Optional.  A JSON list of filters to apply to the data')
    label(for='g-dbas-filters-param') Default filters
    input#g-dbas-filters-param.form-control.input-sm(type='text')
  .form-group(title='Optional.  The default number of rows to return')
    label(for='g-dbas-limit-param') Default limit
    input#g-dbas-limit-param.form-control.input-sm(type='text')
  .form-group(title='The default format when downloading data')
    label(for='g-dbas-format-param') Default format
    select#g-dbas-format-param.input-sm.form-control
      option(value='list', selected=true) JSON list of lists
      option(value='dict') JSON list of objects
      option(value='csv') CSV with header row
      option(value='json') JSON list of without query information
      option(value='jsonlines') JSON lines -- each line is a stand-alone JSON value
      option(value='geojson') GeoJSON -- all rows and values are combined into a single GeometryCollection or FeatureCollection

mixin g-dbas-uri
  .form-group(title='This is of the form [(dialect)://][(user name)[:(password)]@](server)[:(port)]/(database)[?(options)].  Dialect is one of mongodb, postgresql, sqlite, mysql, oracle, or mssql.  For example, postgresql://localhost/sampledb')
    label.control-label(for='g-edit-dbas-dburi') Database URI
    input#g-edit-dbas-dburi.input-sm.form-control(
      type='text', placeholder='URI -- (dialect)://(user):(password)@(server):(port)/(database)?(options)')
