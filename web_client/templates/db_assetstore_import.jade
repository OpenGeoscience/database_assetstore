.g-body-title Import a table or collection from a database
.g-dbas-import-instructions.
  Use this page to import an existing table or collection from the Database
  assetstore.

form.g-dbas-import-form
  .form-group(title="Each selected table will be added as a new item if it doesn't already exist in the destination")
    label(for="g-dbas-table-name") Table or Collection name
    - var numEntries = tableList.length > 1 ? 1 : 0
    for database in tableList
      - numEntries += database['tables'].length + (database['tables'].length > 1 ? 2 : 1)
    - var selectSize = Math.min(numEntries, 20)
    select.input-sm.form-control#g-dbas-table-name(multiple=true, size=selectSize)
      if tableList.length > 1
        option(value='', selected=true) All tables in all databases
      for database in tableList
        optgroup(label= database['database'])
          if database['tables'].length > 1
            option(value='database:'+database['database']) All tables
          for table in database['tables']
            option(value='database:'+database['database']+':table:'+table['name'])= table['name']
  .form-group(title='Optional.  This is either a field (column) name or a JSON list of multiple fields and directions for sorting (e.g., [["field1", 1], ["field2", -1]])')
    label(for="g-dbas-sort-param") Default sort order
    input.form-control.input-sm#g-dbas-sort-param(type="text")
  .form-group(title='Optional.  A comma-separated or JSON list of fields (column names) to return')
    label(for="g-dbas-fields-param") Default fields
    input.form-control.input-sm#g-dbas-fields-param(type="text")
  .form-group(title='Optional.  A JSON list of filters to apply to the data')
    label(for="g-dbas-filters-param") Default filters
    input.form-control.input-sm#g-dbas-filters-param(type="text")
  .form-group(title='Optional.  The default number of rows to return')
    label(for="g-dbas-limit-param") Default limit
    input.form-control.input-sm#g-dbas-limit-param(type="text")
  .form-group(title='The default format when downloading data')
    label(for="g-dbas-format-param") Default format
    select.input-sm.form-control#g-dbas-format-param
      option(value='list', selected=true) JSON list of lists
      option(value='dict') JSON list of objects
      option(value='csv') CSV with header row
  .form-group
    label(for="g-dbas-import-dest-type") Destination type
    select.form-control#g-dbas-import-dest-type
      option(value="folder", selected=true) Folder
      option(value="user") User
      option(value="collection") Collection
  .form-group
    label(for="g-dbas-import-dest-id") Destination ID
    .input-group.input-group-sm
      input.form-control.input-sm#g-dbas-import-dest-id(
        type="text"
        placeholder="Existing folder, user, or collection ID to use as the destination")
      .input-group-btn
        button.g-open-browser.btn.btn-default(type="button")
          i.icon-folder-open
  .g-validation-failed-message
  button.g-submit-dbas-import.btn.btn-success(type="submit")
    i.icon-link-ext
    |  Begin import
