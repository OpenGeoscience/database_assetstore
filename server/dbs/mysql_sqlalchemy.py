#!/usr/bin/env python
# -*- coding: utf-8 -*-

##############################################################################
#  Copyright Kitware Inc.
#
#  Licensed under the Apache License, Version 2.0 ( the "License" );
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
##############################################################################

import sqlalchemy

from girder import logger as log

from . import base
from .sqlalchemydb import SQLAlchemyConnector

MysqlOperators = {
    'eq': '=',
    'ne': '!=',
    'gte': '>=',
    'gt': '>',
    'lte': '<=',
    'lt': '<',
    'regex': 'REGEXP BINARY',  # case sensitive
    'not_regex': 'NOT REGEXP BINARY',  # case sensitive
    'search': 'REGEXP',  # case insenstive
    'not_search': 'NOT REGEXP',  # case insensitive
}

MysqlFunctions = {k: True for k in [
    'cast',
    'count',
    'distinct',

    # From https://dev.mysql.com/doc/refman/5.7/en/func-op-summary-ref.html
    # Some functions related to user, system, and password have be excluded.
    # There doesn't appear to be any programmatic way to enumerate internal
    # functions, nor to check their volatility.  User defined functions could
    # be added by querying 'select * from mysql.func', but without volatility
    # data, this is too dangerous.
    'abs',
    'acos',
    'adddate',
    'addtime',
    'aes_decrypt',
    'aes_encrypt',
    'any_value',
    'ascii',
    'asin',
    'asymmetric_decrypt',
    'asymmetric_derive',
    'asymmetric_encrypt',
    'asymmetric_sign',
    'asymmetric_verify',
    'atan',
    'atan2',
    'avg',
    'benchmark',
    'bin',
    'bit_and',
    'bit_count',
    'bit_length',
    'bit_or',
    'bit_xor',
    'ceil',
    'ceiling',
    'char',
    'char_length',
    'character_length',
    'charset',
    'coalesce',
    'coercibility',
    'collation',
    'compress',
    'concat',
    'concat_ws',
    'connection_id',
    'conv',
    'convert',
    'convert_tz',
    'cos',
    'cot',
    'crc32',
    'create_asymmetric_priv_key',
    'create_asymmetric_pub_key',
    'create_dh_parameters',
    'create_digest',
    'curdate',
    'current_date',
    'current_time',
    'current_timestamp',
    'current_user',
    'curtime',
    'date',
    'date_add',
    'date_format',
    'date_sub',
    'datediff',
    'day',
    'dayname',
    'dayofmonth',
    'dayofweek',
    'dayofyear',
    'default',
    'degrees',
    'des_decrypt',
    'des_encrypt',
    'elt',
    'exp',
    'export_set',
    'extract',
    'extractvalue',
    'field',
    'find_in_set',
    'floor',
    'format',
    'found_rows',
    'from_base64',
    'from_days',
    'from_unixtime',
    'get_format',
    'greatest',
    'group_concat',
    'hex',
    'hour',
    'if',
    'ifnull',
    'inet_aton',
    'inet_ntoa',
    'inet6_aton',
    'inet6_ntoa',
    'insert',
    'instr',
    'interval',
    'is_ipv4',
    'is_ipv4_compat',
    'is_ipv4_mapped',
    'is_ipv6',
    'isnull',
    'json_append',
    'json_array',
    'json_array_append',
    'json_array_insert',
    'json_contains',
    'json_contains_path',
    'json_depth',
    'json_extract',
    'json_insert',
    'json_keys',
    'json_length',
    'json_merge',
    'json_object',
    'json_quote',
    'json_remove',
    'json_replace',
    'json_search',
    'json_set',
    'json_type',
    'json_unquote',
    'json_valid',
    'last_insert_id',
    'lcase',
    'least',
    'left',
    'length',
    'linestring',
    'ln',
    'localtime',
    'localtimestamp',
    'locate',
    'log',
    'log10',
    'log2',
    'lower',
    'lpad',
    'ltrim',
    'make_set',
    'makedate',
    'maketime',
    'max',
    'mbrcontains',
    'mbrcoveredby',
    'mbrcovers',
    'mbrdisjoint',
    'mbrequals',
    'mbrintersects',
    'mbroverlaps',
    'mbrtouches',
    'mbrwithin',
    'md5',
    'microsecond',
    'mid',
    'min',
    'minute',
    'month',
    'monthname',
    'multilinestring',
    'multipoint',
    'multipolygon',
    'name_const',
    'now',
    'nullif',
    'oct',
    'octet_length',
    'ord',
    'period_add',
    'period_diff',
    'pi',
    'point',
    'polygon',
    'position',
    'pow',
    'power',
    'quarter',
    'quote',
    'radians',
    'rand',
    'random_bytes',
    'repeat',
    'replace',
    'reverse',
    'right',
    'round',
    'rpad',
    'rtrim',
    'sec_to_time',
    'second',
    'sha1',
    'sha2',
    'sign',
    'sin',
    'soundex',
    'space',
    'sqrt',
    'st_area',
    'st_asbinary',
    'st_aswkb',
    'st_asgeojson',
    'st_astext',
    'st_aswkt',
    'st_buffer',
    'st_buffer_strategy',
    'st_centroid',
    'st_contains',
    'st_convexhull',
    'st_crosses',
    'st_difference',
    'st_dimension',
    'st_disjoint',
    'st_distance',
    'st_distance_sphere',
    'st_endpoint',
    'st_envelope',
    'st_equals',
    'st_exteriorring',
    'st_geohash',
    'st_geomcollfromtext',
    'st_geometrycollectionfromtext',
    'st_geomcollfromtxt',
    'st_geomcollfromwkb',
    'st_geometrycollectionfromwkb',
    'st_geometryn',
    'st_geometrytype',
    'st_geomfromgeojson',
    'st_geomfromtext',
    'st_geometryfromtext',
    'st_geomfromwkb',
    'st_geometryfromwkb',
    'st_interiorringn',
    'st_intersection',
    'st_intersects',
    'st_isclosed',
    'st_isempty',
    'st_issimple',
    'st_isvalid',
    'st_latfromgeohash',
    'st_length',
    'st_linefromtext',
    'st_linestringfromtext',
    'st_linefromwkb',
    'st_linestringfromwkb',
    'st_longfromgeohash',
    'st_makeenvelope',
    'st_linefromtext',
    'st_linestringfromtext',
    'st_linefromwkb',
    'st_linestringfromwkb',
    'st_longfromgeohash',
    'st_makeenvelope',
    'st_mlinefromtext',
    'st_multilinestringfromtext',
    'st_mlinefromwkb',
    'st_multilinestringfromwkb',
    'st_mpointfromtext',
    'st_multipointfromtext',
    'st_mpointfromwkb',
    'st_multipointfromwkb',
    'st_mpolyfromtext',
    'st_multipolygonfromtext',
    'st_mpolyfromwkb',
    'st_multipolygonfromwkb',
    'st_numgeometries',
    'st_numinteriorring',
    'st_numinteriorrings',
    'st_numpoints',
    'st_overlaps',
    'st_pointfromgeohash',
    'st_pointfromtext',
    'st_pointfromwkb',
    'st_pointn',
    'st_polyfromtext',
    'st_polygonfromtext',
    'st_polyfromwkb',
    'st_polygonfromwkb',
    'st_simplify',
    'st_srid',
    'st_startpoint',
    'st_symdifference',
    'st_touches',
    'st_union',
    'st_validate',
    'st_within',
    'st_x',
    'st_y',
    'std',
    'stddev',
    'stddev_pop',
    'stddev_samp',
    'str_to_date',
    'strcmp',
    'subdate',
    'substr',
    'substring',
    'substring_index',
    'subtime',
    'sum',
    'tan',
    'time',
    'time_format',
    'time_to_sec',
    'timediff',
    'timestamp',
    'timestampadd',
    'timestampdiff',
    'to_base64',
    'to_days',
    'to_seconds',
    'trim',
    'truncate',
    'ucase',
    'uncompress',
    'uncompressed_length',
    'unhex',
    'unix_timestamp',
    'updatexml',
    'upper',
    'user',
    'utc_date',
    'utc_time',
    'utc_timestamp',
    'uuid',
    'uuid_short',
    'var_pop',
    'var_samp',
    'variance',
    'version',
    'week',
    'weekday',
    'weekofyear',
    'weight_string',
    'year',
    'yearweek',
]}


class MysqlSAConnector(SQLAlchemyConnector):
    name = 'sqlalchemy_mysql'

    def __init__(self, *args, **kwargs):
        # The super class also validates the connector
        super(MysqlSAConnector, self).__init__(*args, **kwargs)
        self.databaseOperators = MysqlOperators
        self._allowedFunctions = MysqlFunctions

    def setSessionReadOnly(self, sess):
        """
        Set the specified session to read only if possible.  Subclasses should
        implement the appropriate behavior.

        :param sess: the session to adjust.
        """
        try:
            sess.execute('SET SESSION TRANSACTION READ ONLY;')
        except sqlalchemy.exc.OperationalError:
            log.warn('Couldn\'t set session to read only')
            sess.rollback()


base.registerConnectorClass(MysqlSAConnector.name, MysqlSAConnector, {
    'dialects': {
        'mysql': 'mysql',
        'mysqldb': 'mysql',
    },
    'default_dialect': 'mysql',
    'priority': 0,
})
