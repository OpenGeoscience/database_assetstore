language: python

python:
    - "2.7"
    - "3.5"

cache:
    directories:
        - $HOME/.cache

sudo: false

compiler:
    - gcc

addons:
    postgresql: "9.4"
    apt:
        packages:
            - postgresql-9.4-postgis-2.3

services:
    - postgresql

before_install:
    - nvm install v6
    - npm install -g npm
    - node --version
    - npm --version

    - main_path=$PWD
    - build_path=$PWD/build
    - mkdir -p $build_path

    - girder_path=$build_path/girder
    - rm -fr $girder_path
    - GIRDER_VERSION=master
    - git clone --branch $GIRDER_VERSION https://github.com/girder/girder.git $girder_path
    - ln -sf $main_path $girder_path/plugins/
    - ls -l $girder_path/plugins

    - export MONGO_VERSION=3.2.18
    - export PY_COVG="ON"
    - if [ ${TRAVIS_PYTHON_VERSION:0:1} == "3" ]; then export PY3="true"; else export PY2="true"; fi
    - CACHE=$HOME/.cache source $girder_path/scripts/install_mongo.sh
    - mkdir /tmp/db
    - mongod --dbpath=/tmp/db >/dev/null 2>/dev/null &
    - mongod --version

    - CACHE=$HOME/.cache CMAKE_VERSION=3.1.0 CMAKE_SHORT_VERSION=3.1 source $girder_path/scripts/install_cmake.sh
    - cmake --version

    - mkdir -p $HOME/.cache/node_modules || true
    - ln -sf $HOME/.cache/node_modules .
    - npm prune
    - pip install -U pip virtualenv

install:
    - cd $girder_path
    - pip install -U -r requirements-dev.txt -e .
    - pip install -r $main_path/requirements.txt -e .
    - girder-install web --plugins=database_assetstore --dev

before_script:
    - psql -U postgres -c 'CREATE EXTENSION postgis;'
    - psql -U postgres -c 'CREATE EXTENSION postgis_topology;'
    - psql -U postgres -c 'CREATE EXTENSION postgis_sfcgal;' || true
    - psql -U postgres -c 'CREATE EXTENSION fuzzystrmatch;'
    - psql -U postgres -c 'CREATE EXTENSION address_standardizer;' || true
    - psql -U postgres -c 'CREATE EXTENSION address_standardizer_data_us;' || true
    - psql -U postgres -c 'CREATE EXTENSION postgis_tiger_geocoder;'
    - psql -U postgres -c 'CREATE EXTENSION pgrouting;' || true
    - psql -U postgres -c 'CREATE EXTENSION ogr_fdw;' || true
    - psql -U postgres -c 'create database sampledb;'

script:
    - mkdir -p $build_path/girder_testing_build
    - cd $build_path/girder_testing_build
    - cmake -DTEST_PLUGINS:STRING=database_assetstore -DRUN_CORE_TESTS:BOOL="OFF" -DPYTHON_VERSION:STRING=${TRAVIS_PYTHON_VERSION} $girder_path

    # Get sample database files and install them.
    - make -j 3
    # Load postgres and show that we loaded the database properly
    - gunzip -c data/plugins/database_assetstore/testdb.sql.gz | psql -U postgres sampledb
    - psql -U postgres -h 127.0.0.1 sampledb -c "SELECT table_type,table_name FROM information_schema.tables WHERE table_schema='public' order by table_name;" | cat
    # Make sure we have a row with a null value
    - psql -U postgres -h 127.0.0.1 sampledb -c "update towns set fourcolor=NULL where town='ABINGTON';" | cat
    # Load mongo and show that we loaded the database properly
    - bunzip2 -c data/plugins/database_assetstore/mongodb.permits.json.bz2 | mongoimport --db boston --collection permits
    - mongo boston --eval 'db.permits.count()'

    # Only some functions are available in the version that Travis has.
    # - psql -U postgres -h 127.0.0.1 sampledb -c "SELECT lower(proname), provolatile FROM pg_proc order by lower(proname);" | cat
    - JASMINE_TIMEOUT=15000 ctest -VV

after_success:
    - bash <(curl -s https://codecov.io/bash) -R $main_path -s $girder_path
